# Generated by Django 2.1.15 on 2020-11-23 14:14

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccountEmailaddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.CharField(max_length=254, unique=True)),
                ('verified', models.IntegerField()),
                ('primary', models.IntegerField()),
            ],
            options={
                'db_table': 'account_emailaddress',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AccountEmailconfirmation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField()),
                ('sent', models.DateTimeField(blank=True, null=True)),
                ('key', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'db_table': 'account_emailconfirmation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AmenityItemList',
            fields=[
                ('amenity_item_id', models.AutoField(db_column='AMENITY_ITEM_ID', primary_key=True, serialize=False)),
                ('amenity_name', models.CharField(db_column='AMENITY_NAME', max_length=50)),
                ('amenity_stock', models.IntegerField(db_column='AMENITY_STOCK')),
            ],
            options={
                'db_table': 'AMENITY_ITEM_LIST',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AmenitySpendHistory',
            fields=[
                ('amenity_spend_id', models.AutoField(db_column='AMENITY_SPEND_ID', primary_key=True, serialize=False)),
                ('amenity_spend_amount', models.IntegerField(db_column='AMENITY_SPEND_AMOUNT')),
            ],
            options={
                'db_table': 'AMENITY_SPEND_HISTORY',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CheckIn',
            fields=[
                ('check_in_id', models.AutoField(db_column='CHECK_IN_ID', primary_key=True, serialize=False)),
                ('check_in_card_number', models.CharField(blank=True, db_column='CHECK_IN_CARD_NUMBER', max_length=30, null=True)),
                ('check_in_note', models.CharField(blank=True, db_column='CHECK_IN_NOTE', max_length=300, null=True)),
                ('check_in_extra_fee', models.IntegerField(blank=True, db_column='CHECK_IN_EXTRA_FEE', null=True)),
                ('check_in_timestamp', models.DateTimeField(db_column='CHECK_IN_TIMESTAMP')),
            ],
            options={
                'db_table': 'CHECK_IN',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CheckOut',
            fields=[
                ('check_out_id', models.AutoField(db_column='CHECK_OUT_ID', primary_key=True, serialize=False)),
                ('check_out_add_card_number', models.CharField(blank=True, db_column='CHECK_OUT_ADD_CARD_NUMBER', max_length=30, null=True)),
                ('check_out_timestamp', models.DateTimeField(db_column='CHECK_OUT_TIMESTAMP')),
            ],
            options={
                'db_table': 'CHECK_OUT',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.AutoField(db_column='CUSTOMER_ID', primary_key=True, serialize=False)),
                ('customer_last_name', models.CharField(blank=True, db_column='CUSTOMER_LAST_NAME', max_length=30, null=True)),
                ('customer_first_name', models.CharField(db_column='CUSTOMER_FIRST_NAME', max_length=30)),
                ('customer_nation', models.CharField(blank=True, db_column='CUSTOMER_NATION', max_length=30, null=True)),
                ('customer_gender', models.CharField(blank=True, db_column='CUSTOMER_GENDER', max_length=15, null=True)),
                ('customer_birthdate', models.DateField(blank=True, db_column='CUSTOMER_BIRTHDATE', null=True)),
                ('customer_phone_number', models.CharField(blank=True, db_column='CUSTOMER_PHONE_NUMBER', max_length=30, null=True)),
                ('customer_group', models.CharField(blank=True, db_column='CUSTOMER_GROUP', max_length=30, null=True)),
                ('customer_mileage', models.IntegerField(blank=True, db_column='CUSTOMER_MILEAGE', null=True)),
            ],
            options={
                'db_table': 'CUSTOMER',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomerParkingSystem',
            fields=[
                ('customer_parking_id', models.AutoField(db_column='CUSTOMER_PARKING_ID', primary_key=True, serialize=False)),
                ('car_plate_number', models.CharField(db_column='CAR_PLATE_NUMBER', max_length=20)),
                ('parking_location', models.CharField(blank=True, db_column='PARKING_LOCATION', max_length=10, null=True)),
                ('parking_in_timestamp', models.DateTimeField(db_column='PARKING_IN_TIMESTAMP')),
            ],
            options={
                'db_table': 'CUSTOMER_PARKING_SYSTEM',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomerPreperence',
            fields=[
                ('customer_preperence_id', models.AutoField(db_column='CUSTOMER_PREPERENCE_ID', primary_key=True, serialize=False)),
                ('room_floor', models.CharField(blank=True, db_column='ROOM_FLOOR', max_length=3, null=True)),
                ('room_smoke', models.IntegerField(blank=True, db_column='ROOM_SMOKE', null=True)),
                ('customer_demand', models.CharField(blank=True, db_column='CUSTOMER_DEMAND', max_length=150, null=True)),
                ('customer_complaint', models.CharField(blank=True, db_column='CUSTOMER_COMPLAINT', max_length=150, null=True)),
            ],
            options={
                'db_table': 'CUSTOMER_PREPERENCE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DepartmentTeam',
            fields=[
                ('team_id', models.AutoField(db_column='TEAM_ID', primary_key=True, serialize=False)),
                ('team_name', models.CharField(db_column='TEAM_NAME', max_length=30)),
                ('manager_id', models.IntegerField(blank=True, db_column='MANAGER_ID', null=True)),
            ],
            options={
                'db_table': 'DEPARTMENT_TEAM',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'django_site',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EmployeeDepartment',
            fields=[
                ('department_id', models.AutoField(db_column='DEPARTMENT_ID', primary_key=True, serialize=False)),
                ('department_name', models.CharField(db_column='DEPARTMENT_NAME', max_length=30)),
                ('department_location', models.CharField(blank=True, db_column='DEPARTMENT_LOCATION', max_length=30, null=True)),
                ('department_office_extension', models.CharField(blank=True, db_column='DEPARTMENT_OFFICE_EXTENSION', max_length=30, null=True)),
            ],
            options={
                'db_table': 'EMPLOYEE_DEPARTMENT',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Employees',
            fields=[
                ('employee_id', models.AutoField(db_column='EMPLOYEE_ID', primary_key=True, serialize=False)),
                ('employee_last_name', models.CharField(blank=True, db_column='EMPLOYEE_LAST_NAME', max_length=30, null=True)),
                ('employee_first_name', models.CharField(db_column='EMPLOYEE_FIRST_NAME', max_length=30)),
                ('employee_hire_timestamp', models.DateTimeField(db_column='EMPLOYEE_HIRE_TIMESTAMP')),
                ('employee_gender', models.CharField(blank=True, db_column='EMPLOYEE_GENDER', max_length=15, null=True)),
                ('employee_s_s_num', models.CharField(blank=True, db_column='EMPLOYEE_S_S_NUM', max_length=13, null=True)),
                ('employee_phone_number', models.CharField(blank=True, db_column='EMPLOYEE_PHONE_NUMBER', max_length=11, null=True)),
                ('employee_ability_language', models.CharField(blank=True, db_column='EMPLOYEE_ABILITY_LANGUAGE', max_length=50, null=True)),
            ],
            options={
                'db_table': 'EMPLOYEES',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EmployeesParkingSystem',
            fields=[
                ('employees_parking_history_id', models.AutoField(db_column='EMPLOYEES_PARKING_HISTORY_ID', primary_key=True, serialize=False)),
                ('car_plate_number', models.CharField(db_column='CAR_PLATE_NUMBER', max_length=20)),
                ('parking_location', models.CharField(blank=True, db_column='PARKING_LOCATION', max_length=10, null=True)),
                ('parking_in_timestamp', models.DateTimeField(db_column='PARKING_IN_TIMESTAMP')),
            ],
            options={
                'db_table': 'EMPLOYEES_PARKING_SYSTEM',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HouseKeepingTaskList',
            fields=[
                ('house_keeping_task_id', models.AutoField(db_column='HOUSE_KEEPING_TASK_ID', primary_key=True, serialize=False)),
                ('house_keeping_task_creation_timestamp', models.DateTimeField(db_column='HOUSE_KEEPING_TASK_CREATION_TIMESTAMP')),
                ('house_keeping_task_start_time', models.TimeField(blank=True, db_column='HOUSE_KEEPING_TASK_START_TIME', null=True)),
                ('house_keeping_task_end_time', models.TimeField(blank=True, db_column='HOUSE_KEEPING_TASK_END_TIME', null=True)),
            ],
            options={
                'db_table': 'HOUSE_KEEPING_TASK_LIST',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LostItemList',
            fields=[
                ('lost_item_id', models.AutoField(db_column='LOST_ITEM_ID', primary_key=True, serialize=False)),
                ('lost_item_category', models.CharField(db_column='LOST_ITEM_CATEGORY', max_length=30)),
                ('lost_item_memo', models.CharField(blank=True, db_column='LOST_ITEM_MEMO', max_length=200, null=True)),
                ('lost_item_return', models.IntegerField(db_column='LOST_ITEM_RETURN')),
                ('lost_item_recipient_info', models.CharField(blank=True, db_column='LOST_ITEM_RECIPIENT_INFO', max_length=50, null=True)),
            ],
            options={
                'db_table': 'LOST_ITEM_LIST',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mileage',
            fields=[
                ('mileage_history_id', models.AutoField(db_column='MILEAGE_HISTORY_ID', primary_key=True, serialize=False)),
                ('mileage_datetime', models.DateTimeField(db_column='MILEAGE_DATETIME')),
                ('mileage_amount', models.IntegerField(db_column='MILEAGE_AMOUNT')),
            ],
            options={
                'db_table': 'MILEAGE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OfficeCheckOn',
            fields=[
                ('office_check_on_id', models.AutoField(db_column='OFFICE_CHECK_ON_ID', primary_key=True, serialize=False)),
                ('office_check_on_timestamp', models.DateTimeField(db_column='OFFICE_CHECK_ON_TIMESTAMP')),
            ],
            options={
                'db_table': 'OFFICE_CHECK_ON',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OfficeCheckOut',
            fields=[
                ('office_check_out_id', models.AutoField(db_column='OFFICE_CHECK_OUT_ID', primary_key=True, serialize=False)),
                ('office_check_out_timestamp', models.DateTimeField(db_column='OFFICE_CHECK_OUT_TIMESTAMP')),
            ],
            options={
                'db_table': 'OFFICE_CHECK_OUT',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RealtimeClaim',
            fields=[
                ('realtime_claim_id', models.AutoField(db_column='REALTIME_CLAIM_ID', primary_key=True, serialize=False)),
                ('realtime_clain_content', models.CharField(blank=True, db_column='REALTIME_CLAIN_CONTENT', max_length=300, null=True)),
                ('claim_creation_time', models.DateTimeField(db_column='CLAIM_CREATION_TIME')),
                ('claim_task_start_time', models.DateTimeField(blank=True, db_column='CLAIM_TASK_START_TIME', null=True)),
                ('claim_task_end_time', models.DateTimeField(blank=True, db_column='CLAIM_TASK_END_TIME', null=True)),
                ('claim_note', models.CharField(blank=True, db_column='CLAIM_NOTE', max_length=300, null=True)),
            ],
            options={
                'db_table': 'REALTIME_CLAIM',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('reservation_id', models.AutoField(db_column='RESERVATION_ID', primary_key=True, serialize=False)),
                ('reservation_id_identify', models.CharField(blank=True, db_column='RESERVATION_ID_IDENTIFY', max_length=2, null=True)),
                ('reservation_prepayment', models.IntegerField(blank=True, db_column='RESERVATION_PREPAYMENT', null=True)),
                ('reservation_requests', models.CharField(blank=True, db_column='RESERVATION_REQUESTS', max_length=100, null=True)),
                ('reservation_card_number', models.CharField(blank=True, db_column='RESERVATION_CARD_NUMBER', max_length=30, null=True)),
                ('reservation_adult_count', models.CharField(db_column='RESERVATION_ADULT_COUNT', max_length=2)),
                ('reservation_child_count', models.CharField(db_column='RESERVATION_CHILD_COUNT', max_length=2)),
                ('reservation_group', models.CharField(blank=True, db_column='RESERVATION_GROUP', max_length=20, null=True)),
                ('reservation_regist_timestamp', models.DateTimeField(db_column='RESERVATION_REGIST_TIMESTAMP')),
                ('reservation_start_date', models.DateField(db_column='RESERVATION_START_DATE')),
                ('reservation_end_date', models.DateField(db_column='RESERVATION_END_DATE')),
                ('reservation_breakfast_included', models.IntegerField(blank=True, db_column='RESERVATION_BREAKFAST_INCLUDED', null=True)),
                ('reservation_check_in_time', models.TimeField(blank=True, db_column='RESERVATION_CHECK_IN_TIME', null=True)),
                ('reservation_check_out_time', models.TimeField(blank=True, db_column='RESERVATION_CHECK_OUT_TIME', null=True)),
            ],
            options={
                'db_table': 'RESERVATION',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ReservationCanceled',
            fields=[
                ('reservation_canceled_id', models.AutoField(db_column='RESERVATION_CANCELED_ID', primary_key=True, serialize=False)),
                ('reservation_canceled_reason', models.CharField(blank=True, db_column='RESERVATION_CANCELED_REASON', max_length=150, null=True)),
                ('reservation_canceled_timestamp', models.DateTimeField(db_column='RESERVATION_CANCELED_TIMESTAMP')),
            ],
            options={
                'db_table': 'RESERVATION_CANCELED',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomList',
            fields=[
                ('room_id', models.AutoField(db_column='ROOM_ID', primary_key=True, serialize=False)),
                ('room_stay', models.IntegerField(db_column='ROOM_STAY')),
                ('room_start_stay', models.DateTimeField(blank=True, db_column='ROOM_START_STAY', null=True)),
                ('room_end_stay', models.DateTimeField(blank=True, db_column='ROOM_END_STAY', null=True)),
                ('room_smoke', models.IntegerField(blank=True, db_column='ROOM_SMOKE', null=True)),
                ('room_view_type', models.CharField(blank=True, db_column='ROOM_VIEW_TYPE', max_length=20, null=True)),
                ('room_space', models.CharField(blank=True, db_column='ROOM_SPACE', max_length=20, null=True)),
                ('room_note', models.CharField(blank=True, db_column='ROOM_NOTE', max_length=100, null=True)),
                ('room_check_housekeeping', models.IntegerField(db_column='ROOM_CHECK_HOUSEKEEPING')),
            ],
            options={
                'db_table': 'ROOM_LIST',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomOrderHistory',
            fields=[
                ('room_order_history_id', models.AutoField(db_column='ROOM_ORDER_HISTORY_ID', primary_key=True, serialize=False)),
                ('room_order_timestamp', models.DateTimeField(db_column='ROOM_ORDER_TIMESTAMP')),
            ],
            options={
                'db_table': 'ROOM_ORDER_HISTORY',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomProductList',
            fields=[
                ('product_id', models.AutoField(db_column='PRODUCT_ID', primary_key=True, serialize=False)),
                ('product_name', models.CharField(db_column='PRODUCT_NAME', max_length=50)),
                ('product_price', models.IntegerField(db_column='PRODUCT_PRICE')),
            ],
            options={
                'db_table': 'ROOM_PRODUCT_LIST',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomTypeInfo',
            fields=[
                ('room_grade_id', models.CharField(db_column='ROOM_GRADE_ID', max_length=30, primary_key=True, serialize=False)),
                ('room_price', models.IntegerField(db_column='ROOM_PRICE')),
                ('room_bed_type', models.CharField(blank=True, db_column='ROOM_BED_TYPE', max_length=10, null=True)),
                ('room_bath_type', models.CharField(blank=True, db_column='ROOM_BATH_TYPE', max_length=10, null=True)),
            ],
            options={
                'db_table': 'ROOM_TYPE_INFO',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SocialaccountSocialaccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(max_length=30)),
                ('uid', models.CharField(max_length=191)),
                ('last_login', models.DateTimeField()),
                ('date_joined', models.DateTimeField()),
                ('extra_data', models.TextField()),
            ],
            options={
                'db_table': 'socialaccount_socialaccount',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SocialaccountSocialapp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(max_length=30)),
                ('name', models.CharField(max_length=40)),
                ('client_id', models.CharField(max_length=191)),
                ('secret', models.CharField(max_length=191)),
                ('key', models.CharField(max_length=191)),
            ],
            options={
                'db_table': 'socialaccount_socialapp',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SocialaccountSocialappSites',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'socialaccount_socialapp_sites',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SocialaccountSocialtoken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.TextField()),
                ('token_secret', models.TextField()),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'socialaccount_socialtoken',
                'managed': False,
            },
        ),
    ]
