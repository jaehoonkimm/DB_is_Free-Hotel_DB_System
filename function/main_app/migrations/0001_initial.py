# Generated by Django 2.1.15 on 2020-11-16 11:26

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AmenityItemList',
            fields=[
                ('amenity_item_id', models.PositiveIntegerField(db_column='AMENITY_ITEM_ID', primary_key=True, serialize=False)),
                ('amenity_category', models.CharField(blank=True, db_column='AMENITY_CATEGORY', max_length=15, null=True)),
                ('amenity_stock', models.IntegerField(blank=True, db_column='AMENITY_STOCK', null=True)),
            ],
            options={
                'db_table': 'AMENITY_ITEM_LIST',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AmenitySpendHistory',
            fields=[
                ('amenity_spend_id', models.PositiveIntegerField(db_column='AMENITY_SPEND_ID', primary_key=True, serialize=False)),
                ('amenity_item_id', models.PositiveIntegerField(db_column='AMENITY_ITEM_ID')),
                ('house_keeping_task_id', models.PositiveIntegerField(db_column='HOUSE_KEEPING_TASK_ID')),
                ('employee_id', models.PositiveIntegerField(db_column='EMPLOYEE_ID')),
                ('room_id', models.PositiveIntegerField(db_column='ROOM_ID')),
                ('room_type_id', models.PositiveIntegerField(db_column='ROOM_TYPE_ID')),
                ('amenity_spend_amount', models.IntegerField(blank=True, db_column='AMENITY_SPEND_AMOUNT', null=True)),
            ],
            options={
                'db_table': 'AMENITY_SPEND_HISTORY',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CheckIn',
            fields=[
                ('check_in_id', models.PositiveIntegerField(db_column='CHECK_IN_ID', primary_key=True, serialize=False)),
                ('room_id', models.PositiveIntegerField(db_column='ROOM_ID')),
                ('room_type_id', models.PositiveIntegerField(db_column='ROOM_TYPE_ID')),
                ('reservation_id', models.PositiveIntegerField(db_column='RESERVATION_ID')),
                ('customer_id', models.PositiveIntegerField(db_column='CUSTOMER_ID')),
                ('check_in_card_number', models.CharField(blank=True, db_column='CHECK_IN_CARD_NUMBER', max_length=16, null=True)),
                ('check_in_requests', models.CharField(blank=True, db_column='CHECK_IN_REQUESTS', max_length=50, null=True)),
                ('check_in_extra_fee', models.IntegerField(blank=True, db_column='CHECK_IN_EXTRA_FEE', null=True)),
                ('check_in_date', models.DateField(blank=True, db_column='CHECK_IN_DATE', null=True)),
                ('check_in_time', models.TimeField(blank=True, db_column='CHECK_IN_TIME', null=True)),
            ],
            options={
                'db_table': 'CHECK_IN',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CheckOut',
            fields=[
                ('check_out_id', models.PositiveIntegerField(db_column='CHECK_OUT_ID', primary_key=True, serialize=False)),
                ('check_in_id', models.PositiveIntegerField(db_column='CHECK_IN_ID')),
                ('room_id', models.PositiveIntegerField(db_column='ROOM_ID')),
                ('reservation_id', models.PositiveIntegerField(db_column='RESERVATION_ID')),
                ('customer_id', models.PositiveIntegerField(db_column='CUSTOMER_ID')),
                ('check_out_card_number', models.CharField(blank=True, db_column='CHECK_OUT_CARD_NUMBER', max_length=16, null=True)),
                ('check_out_date', models.DateField(blank=True, db_column='CHECK_OUT_DATE', null=True)),
                ('check_out_time', models.TimeField(blank=True, db_column='CHECK_OUT_TIME', null=True)),
            ],
            options={
                'db_table': 'CHECK_OUT',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.PositiveIntegerField(db_column='CUSTOMER_ID', primary_key=True, serialize=False)),
                ('customer_last_name', models.CharField(blank=True, db_column='CUSTOMER_LAST_NAME', max_length=10, null=True)),
                ('customer_first_name', models.CharField(blank=True, db_column='CUSTOMER_FIRST_NAME', max_length=22, null=True)),
                ('customer_nation', models.CharField(blank=True, db_column='CUSTOMER_NATION', max_length=15, null=True)),
                ('customer_gender', models.CharField(blank=True, db_column='CUSTOMER_GENDER', max_length=1, null=True)),
                ('customer_birthdate', models.DateField(blank=True, db_column='CUSTOMER_BIRTHDATE', null=True)),
                ('customer_phone_number', models.CharField(blank=True, db_column='CUSTOMER_PHONE_NUMBER', max_length=11, null=True)),
                ('customer_group', models.CharField(blank=True, db_column='CUSTOMER_GROUP', max_length=20, null=True)),
                ('customer_mileage', models.IntegerField(blank=True, db_column='CUSTOMER_MILEAGE', null=True)),
            ],
            options={
                'db_table': 'CUSTOMER',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomerParkingSystem',
            fields=[
                ('car_plate_number', models.CharField(db_column='CAR_PLATE_NUMBER', max_length=8, primary_key=True, serialize=False)),
                ('check_in_id', models.PositiveIntegerField(db_column='CHECK_IN_ID')),
                ('room_id', models.PositiveIntegerField(db_column='ROOM_ID')),
                ('reservation_id', models.PositiveIntegerField(db_column='RESERVATION_ID')),
                ('customer_id', models.PositiveIntegerField(db_column='CUSTOMER_ID')),
                ('parking_fee', models.IntegerField(blank=True, db_column='PARKING_FEE', null=True)),
                ('parking_location', models.CharField(blank=True, db_column='PARKING_LOCATION', max_length=10, null=True)),
                ('parking_in_date', models.DateField(blank=True, db_column='PARKING_IN_DATE', null=True)),
                ('parking_out_date', models.DateField(blank=True, db_column='PARKING_OUT_DATE', null=True)),
                ('parking_in_time', models.TimeField(blank=True, db_column='PARKING_IN_TIME', null=True)),
                ('parking_out_time', models.TimeField(blank=True, db_column='PARKING_OUT_TIME', null=True)),
            ],
            options={
                'db_table': 'CUSTOMER_PARKING_SYSTEM',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomerPreperence',
            fields=[
                ('customer_significant_id', models.PositiveIntegerField(db_column='CUSTOMER_SIGNIFICANT_ID', primary_key=True, serialize=False)),
                ('customer_id', models.PositiveIntegerField(db_column='CUSTOMER_ID')),
                ('room_floor_ask', models.CharField(blank=True, db_column='ROOM_FLOOR_ASK', max_length=2, null=True)),
                ('room_smoke_ask', models.IntegerField(blank=True, db_column='ROOM_SMOKE_ASK', null=True)),
                ('customer_demand', models.CharField(blank=True, db_column='CUSTOMER_DEMAND', max_length=50, null=True)),
                ('customer_complaint', models.CharField(blank=True, db_column='CUSTOMER_COMPLAINT', max_length=50, null=True)),
            ],
            options={
                'db_table': 'CUSTOMER_PREPERENCE',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DayOff',
            fields=[
                ('day_off_id', models.PositiveIntegerField(db_column='DAY_OFF_ID', primary_key=True, serialize=False)),
                ('employee_id', models.PositiveIntegerField(db_column='EMPLOYEE_ID')),
                ('department_id', models.PositiveIntegerField(db_column='DEPARTMENT_ID')),
                ('day_off_requested', models.DateTimeField(blank=True, db_column='DAY_OFF_REQUESTED', null=True)),
                ('day_off_type', models.CharField(blank=True, db_column='DAY_OFF_TYPE', max_length=10, null=True)),
                ('day_off_start_date', models.DateTimeField(blank=True, db_column='DAY_OFF_START_DATE', null=True)),
                ('day_off_end_date', models.DateTimeField(blank=True, db_column='DAY_OFF_END_DATE', null=True)),
            ],
            options={
                'db_table': 'DAY_OFF',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EmpDept',
            fields=[
                ('department_id', models.PositiveIntegerField(db_column='DEPARTMENT_ID', primary_key=True, serialize=False)),
                ('department_name', models.CharField(blank=True, db_column='DEPARTMENT_NAME', max_length=10, null=True)),
                ('department_manager_id', models.CharField(blank=True, db_column='DEPARTMENT_MANAGER_ID', max_length=10, null=True)),
                ('department_location', models.CharField(blank=True, db_column='DEPARTMENT_LOCATION', max_length=10, null=True)),
                ('department_extension_number', models.CharField(blank=True, db_column='DEPARTMENT_EXTENSION_NUMBER', max_length=15, null=True)),
            ],
            options={
                'db_table': 'EMP_DEPT',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EmployeeDepartment',
            fields=[
                ('team_id', models.PositiveIntegerField(db_column='TEAM_ID', primary_key=True, serialize=False)),
                ('department_id', models.PositiveIntegerField(db_column='DEPARTMENT_ID')),
                ('team_name', models.CharField(blank=True, db_column='TEAM_NAME', max_length=10, null=True)),
                ('team_manager_id', models.CharField(blank=True, db_column='TEAM_MANAGER_ID', max_length=10, null=True)),
                ('team_extension_number', models.CharField(blank=True, db_column='TEAM_EXTENSION_NUMBER', max_length=15, null=True)),
            ],
            options={
                'db_table': 'EMPLOYEE_DEPARTMENT',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Employees',
            fields=[
                ('employee_id', models.PositiveIntegerField(db_column='EMPLOYEE_ID', primary_key=True, serialize=False)),
                ('department_id', models.PositiveIntegerField(db_column='DEPARTMENT_ID')),
                ('employee_last_name', models.CharField(blank=True, db_column='EMPLOYEE_LAST_NAME', max_length=10, null=True)),
                ('employee_family_name', models.CharField(blank=True, db_column='EMPLOYEE_FAMILY_NAME', max_length=22, null=True)),
                ('employee_hire_date', models.DateField(blank=True, db_column='EMPLOYEE_HIRE_DATE', null=True)),
                ('employee_gender', models.IntegerField(blank=True, db_column='EMPLOYEE_GENDER', null=True)),
                ('employee_ssn', models.CharField(blank=True, db_column='EMPLOYEE_SSN', max_length=13, null=True)),
                ('employee_phone_number', models.CharField(blank=True, db_column='EMPLOYEE_PHONE_NUMBER', max_length=11, null=True)),
                ('employee_ability_language', models.CharField(blank=True, db_column='EMPLOYEE_ABILITY_LANGUAGE', max_length=50, null=True)),
                ('employee_pay', models.IntegerField(blank=True, db_column='EMPLOYEE_PAY', null=True)),
                ('employee_extra_pay', models.IntegerField(blank=True, db_column='EMPLOYEE_EXTRA_PAY', null=True)),
            ],
            options={
                'db_table': 'EMPLOYEES',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EmployeesParkingSystem',
            fields=[
                ('car_plate_number', models.CharField(db_column='CAR_PLATE_NUMBER', max_length=8, primary_key=True, serialize=False)),
                ('employee_id', models.PositiveIntegerField(db_column='EMPLOYEE_ID')),
                ('department_id', models.PositiveIntegerField(db_column='DEPARTMENT_ID')),
                ('parking_fee', models.PositiveIntegerField(blank=True, db_column='PARKING_FEE', null=True)),
                ('parking_location', models.CharField(blank=True, db_column='PARKING_LOCATION', max_length=3, null=True)),
                ('parking_in_time', models.DateTimeField(blank=True, db_column='PARKING_IN_TIME', null=True)),
                ('parking_out_time', models.DateTimeField(blank=True, db_column='PARKING_OUT_TIME', null=True)),
            ],
            options={
                'db_table': 'EMPLOYEES_PARKING_SYSTEM',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EtcInfo',
            fields=[
                ('employee_information_id', models.PositiveIntegerField(db_column='EMPLOYEE_INFORMATION_ID', primary_key=True, serialize=False)),
                ('employee_id', models.PositiveIntegerField(db_column='EMPLOYEE_ID')),
                ('department_id', models.PositiveIntegerField(db_column='DEPARTMENT_ID')),
                ('employee_health', models.CharField(blank=True, db_column='EMPLOYEE_HEALTH', max_length=50, null=True)),
                ('emplyoee_complain', models.CharField(blank=True, db_column='EMPLYOEE_COMPLAIN', max_length=50, null=True)),
                ('emplyoee_etc', models.CharField(blank=True, db_column='EMPLYOEE_ETC', max_length=50, null=True)),
            ],
            options={
                'db_table': 'ETC_INFO',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HouseKeepingTaskList',
            fields=[
                ('house_keeping_task_id', models.PositiveIntegerField(db_column='HOUSE_KEEPING_TASK_ID', primary_key=True, serialize=False)),
                ('employee_id', models.PositiveIntegerField(db_column='EMPLOYEE_ID')),
                ('room_id', models.PositiveIntegerField(db_column='ROOM_ID')),
                ('room_type_id', models.PositiveIntegerField(db_column='ROOM_TYPE_ID')),
                ('house_keeping_task_creation_time', models.DateTimeField(blank=True, db_column='HOUSE_KEEPING_TASK_CREATION_TIME', null=True)),
                ('house_keeping_task_complete', models.IntegerField(blank=True, db_column='HOUSE_KEEPING_TASK_COMPLETE', null=True)),
                ('house_keeping_task_start_time', models.DateTimeField(blank=True, db_column='HOUSE_KEEPING_TASK_START_TIME', null=True)),
                ('house_keeping_task_end_time', models.DateTimeField(blank=True, db_column='HOUSE_KEEPING_TASK_END_TIME', null=True)),
            ],
            options={
                'db_table': 'HOUSE_KEEPING_TASK_LIST',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LostItemList',
            fields=[
                ('lost_item_id', models.PositiveIntegerField(db_column='LOST_ITEM_ID', primary_key=True, serialize=False)),
                ('house_keeping_checklist_id', models.PositiveIntegerField(db_column='HOUSE_KEEPING_CHECKLIST_ID')),
                ('house_keeping_task_id', models.PositiveIntegerField(db_column='HOUSE_KEEPING_TASK_ID')),
                ('employee_id', models.PositiveIntegerField(db_column='EMPLOYEE_ID')),
                ('room_id', models.PositiveIntegerField(db_column='ROOM_ID')),
                ('room_type_id', models.PositiveIntegerField(db_column='ROOM_TYPE_ID')),
                ('lost_item_category', models.CharField(blank=True, db_column='LOST_ITEM_CATEGORY', max_length=10, null=True)),
                ('lost_item_return', models.IntegerField(blank=True, db_column='LOST_ITEM_RETURN', null=True)),
                ('lost_item_memo', models.CharField(blank=True, db_column='LOST_ITEM_MEMO', max_length=50, null=True)),
                ('lost_item_recipient', models.CharField(blank=True, db_column='LOST_ITEM_RECIPIENT', max_length=10, null=True)),
            ],
            options={
                'db_table': 'LOST_ITEM_LIST',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeetingroomInfo',
            fields=[
                ('meetingroom_id', models.PositiveIntegerField(db_column='MEETINGROOM_ID', primary_key=True, serialize=False)),
                ('meetingroom_type', models.CharField(blank=True, db_column='MEETINGROOM_TYPE', max_length=1, null=True)),
                ('meetingroom_capacity', models.CharField(blank=True, db_column='MEETINGROOM_CAPACITY', max_length=5, null=True)),
            ],
            options={
                'db_table': 'MEETINGROOM_INFO',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MileageLog',
            fields=[
                ('mileage_id', models.PositiveIntegerField(db_column='MILEAGE_ID', primary_key=True, serialize=False)),
                ('customer_id', models.PositiveIntegerField(db_column='CUSTOMER_ID')),
                ('mileage_title', models.CharField(blank=True, db_column='MILEAGE_TITLE', max_length=20, null=True)),
                ('mileage_date', models.DateField(blank=True, db_column='MILEAGE_DATE', null=True)),
                ('mileage_time', models.TimeField(blank=True, db_column='MILEAGE_TIME', null=True)),
                ('mileage_amount', models.IntegerField(blank=True, db_column='MILEAGE_AMOUNT', null=True)),
            ],
            options={
                'db_table': 'MILEAGE_LOG',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OrderHistory',
            fields=[
                ('order_id', models.PositiveIntegerField(db_column='ORDER_ID', primary_key=True, serialize=False)),
                ('room_id', models.PositiveIntegerField(db_column='ROOM_ID')),
                ('customer_id', models.PositiveIntegerField(db_column='CUSTOMER_ID')),
                ('product_id', models.PositiveIntegerField(db_column='PRODUCT_ID')),
                ('order_date', models.DateField(blank=True, db_column='ORDER_DATE', null=True)),
                ('order_time', models.TimeField(blank=True, db_column='ORDER_TIME', null=True)),
                ('order_amout', models.CharField(blank=True, db_column='ORDER_AMOUT', max_length=5, null=True)),
            ],
            options={
                'db_table': 'ORDER_HISTORY',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OutWorkReport',
            fields=[
                ('out_work_id', models.PositiveIntegerField(db_column='OUT_WORK_ID', primary_key=True, serialize=False)),
                ('employee_id', models.PositiveIntegerField(db_column='EMPLOYEE_ID')),
                ('department_id', models.PositiveIntegerField(db_column='DEPARTMENT_ID')),
                ('out_work_creationd', models.DateTimeField(blank=True, db_column='OUT_WORK_CREATIOND', null=True)),
                ('out_work_type', models.CharField(blank=True, db_column='OUT_WORK_TYPE', max_length=10, null=True)),
                ('out_work_start_date', models.DateTimeField(blank=True, db_column='OUT_WORK_START_DATE', null=True)),
                ('out_work_end_date', models.DateTimeField(blank=True, db_column='OUT_WORK_END_DATE', null=True)),
            ],
            options={
                'db_table': 'OUT_WORK_REPORT',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RealtimeClaim',
            fields=[
                ('realtime_claim_id', models.PositiveIntegerField(db_column='REALTIME_CLAIM_ID', primary_key=True, serialize=False)),
                ('room_id', models.PositiveIntegerField(db_column='ROOM_ID')),
                ('room_type_id', models.PositiveIntegerField(db_column='ROOM_TYPE_ID')),
                ('customer_id', models.PositiveIntegerField(db_column='CUSTOMER_ID')),
                ('employee_id', models.PositiveIntegerField(db_column='EMPLOYEE_ID')),
                ('department_id', models.PositiveIntegerField(db_column='DEPARTMENT_ID')),
                ('realtime_clain_content', models.CharField(blank=True, db_column='REALTIME_CLAIN_CONTENT', max_length=50, null=True)),
                ('claim_creation_date', models.DateField(blank=True, db_column='CLAIM_CREATION_DATE', null=True)),
                ('claim_end_date', models.DateField(blank=True, db_column='CLAIM_END_DATE', null=True)),
                ('claim_creation_time', models.TimeField(blank=True, db_column='CLAIM_CREATION_TIME', null=True)),
                ('claim_task_start_time', models.TimeField(blank=True, db_column='CLAIM_TASK_START_TIME', null=True)),
                ('claim_task_end_time', models.TimeField(blank=True, db_column='CLAIM_TASK_END_TIME', null=True)),
                ('claim_task_complete', models.IntegerField(blank=True, db_column='CLAIM_TASK_COMPLETE', null=True)),
            ],
            options={
                'db_table': 'REALTIME_CLAIM',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('reservation_id', models.PositiveIntegerField(db_column='RESERVATION_ID', primary_key=True, serialize=False)),
                ('room_type_id', models.PositiveIntegerField(db_column='ROOM_TYPE_ID')),
                ('customer_id', models.PositiveIntegerField(db_column='CUSTOMER_ID')),
                ('reservation_id_identify', models.CharField(blank=True, db_column='RESERVATION_ID_IDENTIFY', max_length=2, null=True)),
                ('reservation_prepayment', models.IntegerField(blank=True, db_column='RESERVATION_PREPAYMENT', null=True)),
                ('reservation_card_number', models.CharField(blank=True, db_column='RESERVATION_CARD_NUMBER', max_length=16, null=True)),
                ('reservation_adult_count', models.CharField(blank=True, db_column='RESERVATION_ADULT_COUNT', max_length=2, null=True)),
                ('reservation_child_count', models.CharField(blank=True, db_column='RESERVATION_CHILD_COUNT', max_length=2, null=True)),
                ('reservation_group', models.CharField(blank=True, db_column='RESERVATION_GROUP', max_length=20, null=True)),
                ('reservation_regist_date', models.DateField(blank=True, db_column='RESERVATION_REGIST_DATE', null=True)),
                ('reservation_regist_time', models.TimeField(blank=True, db_column='RESERVATION_REGIST_TIME', null=True)),
                ('reservation_start_date', models.DateField(blank=True, db_column='RESERVATION_START_DATE', null=True)),
                ('reservation_end_date', models.DateField(blank=True, db_column='RESERVATION_END_DATE', null=True)),
                ('reservation_breakfast_included', models.IntegerField(blank=True, db_column='RESERVATION_BREAKFAST_INCLUDED', null=True)),
                ('reservation_check_in_time', models.TimeField(blank=True, db_column='RESERVATION_CHECK_IN_TIME', null=True)),
                ('reservation_check_out_time', models.TimeField(blank=True, db_column='RESERVATION_CHECK_OUT_TIME', null=True)),
                ('reservation_requests', models.CharField(blank=True, db_column='RESERVATION_REQUESTS', max_length=50, null=True)),
            ],
            options={
                'db_table': 'RESERVATION',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ReservationCanceled',
            fields=[
                ('reservation_canceled_id', models.PositiveIntegerField(db_column='RESERVATION_CANCELED_ID', primary_key=True, serialize=False)),
                ('reservation_id', models.PositiveIntegerField(db_column='RESERVATION_ID')),
                ('room_type_id', models.PositiveIntegerField(db_column='ROOM_TYPE_ID')),
                ('customer_id', models.PositiveIntegerField(db_column='CUSTOMER_ID')),
                ('reservation_canceled_reason', models.CharField(blank=True, db_column='RESERVATION_CANCELED_REASON', max_length=50, null=True)),
                ('reservation_canceled_card_number', models.CharField(blank=True, db_column='RESERVATION_CANCELED_CARD_NUMBER', max_length=16, null=True)),
                ('reservation_canceled_date', models.DateField(blank=True, db_column='RESERVATION_CANCELED_DATE', null=True)),
                ('reservation_canceled_time', models.TimeField(blank=True, db_column='RESERVATION_CANCELED_TIME', null=True)),
            ],
            options={
                'db_table': 'RESERVATION_CANCELED',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ReservationMeetingroom',
            fields=[
                ('reservation_meeting', models.PositiveIntegerField(db_column='RESERVATION_MEETING', primary_key=True, serialize=False)),
                ('customer_id', models.PositiveIntegerField(db_column='CUSTOMER_ID')),
                ('meetingroom_id', models.PositiveIntegerField(db_column='MEETINGROOM_ID')),
                ('customer_group', models.CharField(blank=True, db_column='CUSTOMER_GROUP', max_length=20, null=True)),
                ('reservation_count', models.IntegerField(blank=True, db_column='RESERVATION_COUNT', null=True)),
                ('reservation_start', models.DateTimeField(blank=True, db_column='RESERVATION_START', null=True)),
                ('reservaton_finish', models.DateTimeField(blank=True, db_column='RESERVATON_FINISH', null=True)),
            ],
            options={
                'db_table': 'RESERVATION_MEETINGROOM',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomHouseKeepingChecklist',
            fields=[
                ('house_keeping_checklist_id', models.PositiveIntegerField(db_column='HOUSE_KEEPING_CHECKLIST_ID', primary_key=True, serialize=False)),
                ('house_keeping_task_id', models.PositiveIntegerField(db_column='HOUSE_KEEPING_TASK_ID')),
                ('employee_id', models.PositiveIntegerField(db_column='EMPLOYEE_ID')),
                ('room_id', models.PositiveIntegerField(db_column='ROOM_ID')),
                ('room_type_id', models.PositiveIntegerField(db_column='ROOM_TYPE_ID')),
                ('room_cleaning', models.IntegerField(blank=True, db_column='ROOM_CLEANING', null=True)),
                ('room_bathroom_cleaning', models.IntegerField(blank=True, db_column='ROOM_BATHROOM_CLEANING', null=True)),
                ('room_amenity', models.IntegerField(blank=True, db_column='ROOM_AMENITY', null=True)),
                ('room_bed_sheet', models.IntegerField(blank=True, db_column='ROOM_BED_SHEET', null=True)),
                ('room_pillow', models.IntegerField(blank=True, db_column='ROOM_PILLOW', null=True)),
                ('room_minibar_product', models.IntegerField(blank=True, db_column='ROOM_MINIBAR_PRODUCT', null=True)),
                ('room_missing_item', models.IntegerField(blank=True, db_column='ROOM_MISSING_ITEM', null=True)),
                ('room_repair_require', models.IntegerField(blank=True, db_column='ROOM_REPAIR_REQUIRE', null=True)),
            ],
            options={
                'db_table': 'ROOM_HOUSE_KEEPING_CHECKLIST',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomList',
            fields=[
                ('room_id', models.PositiveIntegerField(db_column='ROOM_ID', primary_key=True, serialize=False)),
                ('room_type_id', models.PositiveIntegerField(db_column='ROOM_TYPE_ID')),
                ('room_stay', models.IntegerField(blank=True, db_column='ROOM_STAY', null=True)),
                ('room_start_stay', models.DateTimeField(blank=True, db_column='ROOM_START_STAY', null=True)),
                ('room_end_stay', models.DateTimeField(blank=True, db_column='ROOM_END_STAY', null=True)),
                ('room_smoke', models.IntegerField(blank=True, db_column='ROOM_SMOKE', null=True)),
                ('room_view_type', models.CharField(blank=True, db_column='ROOM_VIEW_TYPE', max_length=10, null=True)),
                ('room_space', models.CharField(blank=True, db_column='ROOM_SPACE', max_length=10, null=True)),
                ('room_note', models.CharField(blank=True, db_column='ROOM_NOTE', max_length=50, null=True)),
                ('room_check_housekeeping', models.IntegerField(blank=True, db_column='ROOM_CHECK_HOUSEKEEPING', null=True)),
            ],
            options={
                'db_table': 'ROOM_LIST',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomProductList',
            fields=[
                ('product_id', models.PositiveIntegerField(db_column='PRODUCT_ID', primary_key=True, serialize=False)),
                ('product_category', models.CharField(blank=True, db_column='PRODUCT_CATEGORY', max_length=15, null=True)),
                ('product_price', models.IntegerField(blank=True, db_column='PRODUCT_PRICE', null=True)),
            ],
            options={
                'db_table': 'ROOM_PRODUCT_LIST',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RoomTypeInfo',
            fields=[
                ('room_type_id', models.PositiveIntegerField(db_column='ROOM_TYPE_ID', primary_key=True, serialize=False)),
                ('room_grade', models.CharField(db_column='ROOM_GRADE', max_length=1)),
                ('room_price', models.IntegerField(blank=True, db_column='ROOM_PRICE', null=True)),
                ('room_bed_type', models.CharField(blank=True, db_column='ROOM_BED_TYPE', max_length=10, null=True)),
                ('room_bath_type', models.CharField(blank=True, db_column='ROOM_BATH_TYPE', max_length=10, null=True)),
            ],
            options={
                'db_table': 'ROOM_TYPE_INFO',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('schedule', models.PositiveIntegerField(db_column='SCHEDULE', primary_key=True, serialize=False)),
                ('employee_id', models.PositiveIntegerField(db_column='EMPLOYEE_ID')),
                ('department_id', models.PositiveIntegerField(db_column='DEPARTMENT_ID')),
                ('on_date', models.DateField(blank=True, db_column='ON_DATE', null=True)),
                ('start_time', models.TimeField(blank=True, db_column='START_TIME', null=True)),
                ('finish_time', models.TimeField(blank=True, db_column='FINISH_TIME', null=True)),
            ],
            options={
                'db_table': 'SCHEDULE',
                'managed': False,
            },
        ),
    ]
